############################################################
# Copyright 2005, 2006 Apache Software Foundation 
#
# Licensed under the Apache License, Version 2.0 (the "License"); 
# you may not use this file except in compliance with the License. 
# You may obtain a copy of the License at
# 
#     http://www.apache.org/licenses/LICENSE-2.0 
# 
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS, 
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. 
# See the License for the specific language governing permissions and 
# limitations under the License.
############################################################

############################################################
#
# Filename: Messages.properties
#
# This file contains the text for all messages produced by Woden.
# Each message is keyed by a message number. The file is used as
# a ResourceBundle by Woden.
#
# The messages are separated into two groups - those that relate
# to System type problems (e.g. Woden or parser configuration)
# and those that relate specifically to processing WSDL documents
# (i.e. related to the rules defined in the WSDL spec).  The
# latter group of messages will eventually correspond to asserts
# being added to the W3C WSDL spec and the message numbers will 
# be replaced with corresponding assert references.
#
############################################################

# TODO post-milestone2, resort and renumber the System Config and Parsing errors (JK)

# ------------ System Config errors ---------------------

WSDL001=###Not used yet###
WSDL002={0} Parser configuration error.
WSDL005=The feature name must not be null when attempting to get or set a named feature.
WSDL006=The feature name "{0}" is not recognized.
WSDL007=The property name must not be null when attempting to get or set a named property.
WSDL008=The property name "{0}" is not recognized.
WSDL009=Could not instantiate the "{0}" class.
WSDL010=The extension attribute "{0}" in the context of "{1}" does not have a Java class registered, so it will map to "{2}" by default.
WSDL011=The Java class "{0}" does not implement the "Attr" interface.
WSDL012=No Java type was registered for the extension element "{0}" in the context of "{1}".
WSDL013=The Java class "{0}" does not implement the "ExtensionElement" interface.
WSDL014=No Extension Registry was set on the DescriptionElement so cannot handle the extension element "{0}" in the context of "{1}".
WSDL015=The extension namespace "{0}" in the context of "{1}" does not have a Java class registered.
WSDL016=The Java class "{0}" does not implement the "ComponentExtensions" interface.
WSDL017=The Java class "{0}" representing the WSDL source is not compatible with the WSDLReader implementation class "{1}".

# ------------ Parsing errors -------------------

WSDL500={0} Parsing error in document located at {1}.
WSDL501=Expected a "{0}" element, but found a "{1}" element instead.
WSDL502=Could not create a URL from context URI "{0}" and location URI "{1}".
WSDL503=Could not locate the WSDL document at URL "{0}".
WSDL504=Could not locate the schema document at URL "{0}"
WSDL505=Could not create a QName from the string "{0}" in element "{1}".
WSDL506=Could not create a URI from the string "{0}".
WSDL507=Could not create a QName from the string "{0}".
WSDL508=Could not create a String from a null value.
WSDL509=Could not create a list of QNames from the string "{0}".
WSDL510=Could not create a QName from the string "{0}" within the string of QNames "{1}".
WSDL511=Boolean defaulted to 'false' due to invalid boolean string "{0}".
WSDL512=Could not create an Integer from the string "{0}".

WSDL520=Extension element "{0}" in the context of "{1}" must not be in the WSDL namespace.
WSDL521=Could not parse an inline schema in the WSDL at URL "{0}".
WSDL522=Could not parse a schema imported from URL "{0}".
WSDL523=The QName of an extension attribute must not be null.

# ------------ TODO determine if these errors are needed -------------------

# TODO - replace WSDL5xx error codes with reference numbers from the asserts
#        to be defined in the WSDL spec (i.e. err msg nos. that point to the
#        specific part of the WSDL spec that the error relates to).
# The error codes listed below match the assertion ids in the WSDL 2.0 specification.
# The error code itself is a key for the error message.
# The error code ref is a reference to the location in the specification that
# describes the assertion.
# The error code assertion is the text of the assertion from the specification.


# ---------------- WSDL Document Level Assertions -------------------

Description-0025 = The target namespace ''{0}'' is not an absolute IRI. The target namespace must be an absolute IRI.
Description-0025.assertion = The type of the targetNamespace attribute information item is xs:anyURI. Its value MUST be an absolute IRI (see [IETF RFC 3987]).

Import-0001 = The component ''{0}'' is in the namespace ''{1}'', which has not been imported. A namespace must be imported before components from it can be referenced in this document.
Import-0001.assertion =  However, any WSDL 2.0 document that contains component definitions that refer by QName to WSDL 2.0 components that belong to a different namespace MUST contain a wsdl:import element information item  for that namespace (see 4.2 Importing Descriptions).

Import-0003 = The imported document located at ''{0}'' has the same namespace as this document. An imported document's target namespace must be different than the target namespace of the document that imports it. If the target namespaces are the same a WSDL include should be used instead of a WSDL import.
Import-0003.assertion =  Imported components have different target namespace values from the WSDL 2.0 document that is importing them.

Interface-0031 = The styleDefault attribute contains the IRI ''{0}'', which is not absolute. All IRIs specified for styleDefault must be absolute.
Interface-0031.assertion = The type of the styleDefault attribute information item is list of xs:anyURI. Its value, if present, MUST contain absolute IRIs (see [IETF RFC 3987]).

MessageLabel-0004 = 
MessageLabel-0004.assertion = The messageLabel attribute information item of an interface message reference element information item MUST be present if the message exchange pattern has more than one placeholder message with {direction} equal to the message direction.

MessageLabel-0005 = 
MessageLabel-0005.assertion = The messageLabel attribute information item of an interface fault reference element information item  MUST be present if the message exchange pattern has more than one placeholder message with {direction} equal to the message direction.

MessageLabel-0006 = 
MessageLabel-0006.assertion =  The messageLabel attribute information item  of a binding message reference element information item  MUST be present if the message exchange pattern has more than one placeholder message with {direction} equal to the message direction.

MessageLabel-0007 = 
MessageLabel-0007.assertion =  The messageLabel attribute information item  of a binding fault reference element information item  MUST be present if the message exchange pattern has more than one placeholder message with {direction} equal to the message direction.

MessageLabel-0008 = 
MessageLabel-0008.assertion =  If the messageLabel attribute information item  of an interface message reference element information item  is present then its actual value MUST match the {message label} of some placeholder message with {direction} equal to the message direction.

MessageLabel-0009 = 
MessageLabel-0009.assertion =  If the messageLabel attribute information item  of an interface fault reference element information item  is present then its actual value MUST match the {message label} of some placeholder message with {direction} equal to the message direction.

MessageLabel-0010 = 
MessageLabel-0010.assertion =  If the messageLabel attribute information item  of a binding message reference element information item  is present then its actual value MUST match the {message label} of some placeholder message with {direction} equal to the message direction.

MessageLabel-0011 = 
MessageLabel-0011.assertion =  If the messageLabel attribute information item  of a binding fault reference element information item  is present then its actual value MUST match the {message label} of some placeholder message with {direction} equal to the message direction.

MessageLabel-0012 = 
MessageLabel-0012.assertion =  If the messageLabel attribute information item  of an interface message reference element information item  is absent then there MUST be a unique placeholder message with {direction} equal to the message direction.

MessageLabel-0013 = 
MessageLabel-0013.assertion =  If the messageLabel attribute information item  of an interface fault reference element information item  is absent then there MUST be a unique placeholder message with {direction} equal to the message direction.

MessageLabel-0014 = 
MessageLabel-0014.assertion =  If the messageLabel attribute information item  of a binding message reference element information item  is absent then there MUST be a unique placeholder message with {direction} equal to the message direction.

MessageLabel-0015 = 
MessageLabel-0015.assertion =  If the messageLabel attribute information item  of a binding fault reference element information item  is absent then there MUST be a unique placeholder message with {direction} equal to the message direction.

Schema-0016 = A component in the XML Schema namespace ''{0}'' has been referenced but this namespace is not available. In order to reference components from a XML Schema namespace the namespace must be imported or defined inline.
Schema-0016.assertion = A WSDL 2.0 document MUST NOT refer to XML Schema components in a given namespace unless an xs:import or xs:schema element information item for that namespace is present or the namespace is the XML Schema namespace which contains built-in types as defined in XML Schema Part 2: Datatypes Second Edition [XML Schema: Datatypes].

Schema-0017 = The XML schema imported from ''{0}'' must specify a target namespace.
Schema-0017.assertion = The referenced schema MUST contain a targetNamespace attribute information item on its xs:schema element information item.

#schema-0017b is a replacement for WSDL502
#WSDL502=The namespace "{0}" specified on a schema import element does not match the target namespace "{1}" of the schema at the schemaLocation "{2}".

Schema-0018 = The element ''{0}'' has already been defined in another inline XML Schema with the target namespace ''{1}''.
Schema-0018.assertion = A WSDL 2.0 document MUST NOT define the same element or type in more than one inlined schema.

Schema-0018b = The type ''{0}'' has already been defined in another inline XML Schema with the target namespace ''{1}''.
Schema-0018b.assertion = A WSDL 2.0 document MUST NOT define the same element or type in more than one inlined schema.

Schema-0019 = The XML schema does not define a target namespace. A target namespace must be defined on all WSDL 2.0 inlined XML Schemas.
Schema-0019.assertion =  The xs:schema element information item MUST contain a targetNamespace attribute information item.

# This assertion is for interface message reference
Schema-0020 = The message reference ''{0}'' refers to the type definition ''{1}''. A message reference must refer to an element definition. 
Schema-0020.assertion = An element attribute information item MUST NOT refer to a global xs:simpleType or xs:complexType definition.

# This assertion is for interface fault
Schema-0020b = The fault ''{0}'' refers to the type definition ''{1}''. A fault must refer to an element definition. 
Schema-0020b.assertion = An element attribute information item MUST NOT refer to a global xs:simpleType or xs:complexType definition.

Schema-0021 = The alternative schema language makes use of the XML Schema namespace.
Schema-0021.assertion = A specification of extension syntax for an alternative schema language MUST use a namespace that is different than the namespace of XML Schema.

Schema-0022 = The binding ''{0}'' specified is not consistent with the interface ''{1}'' specified. The binding must refer to the same interface as is specified by the interace attribute.
Schema-0022.assertion = If wsdlx:interface and wsdlx:binding are used together then they MUST satisfy the same consistency rules that apply to the {interface} property of a Service component and the {binding} property of a nested Endpoint component, that is either the binding refers the interface of the service or the binding refers to no interface.

Schema-0052 = The imported XML Schema is not defined with the namespace ''{0}'' that is specified on the import element.
Schema-0052.assertion = The value of the targetNamespace attribute information item of the xs:schema element information item of an imported schema MUST equal the value of the namespace of the import element information item in the importing WSDL 2.0 document.

Schema-0053 = The namespace ''{0}'' specified is not an absolute IRI.
Schema-0053.assertion = The namespace used for an alternate schema language MUST be an absolute IRI.

Types-0023 = The alternate schema language does not include a declaration of an element information item to appear as a child of the types element.
Types-0023.assertion = A specification of extension syntax for an alternative schema language MUST include the declaration of an element information item, intended to appear as a child of the wsdl:types element information item, which references, names, and locates the schema instance (an "import" element information item).


# ---------------- WSDL Component Level Assertions -------------------

# If a Binding component specifies any operation-specific binding details (by including Binding Operation components) or any fault binding details (by including Binding Fault components) then it MUST specify an interface the Binding  component applies to, so as to indicate which interface the operations come from.
Binding-0054 = An interface has not been specified for a binding that specifies operation or fault details. An interface must be specified when operation or fault details are specified.

# A Binding component that defines bindings for an Interface component MUST define bindings for all the operations of that Interface component.
Binding-0055 = The binding ''{0}'' does not define bindings for the interface operation ''{1}''. When a binding specifies an interface it must specify bindings for all of the interface's operations.

# This xs:anyURI MUST be an absolute IRI as defined by [IETF RFC 3987].
Binding-0056 = The type ''{0}'' specified for this binding is not an absolute IRI. The type must be absolute.

# For each Binding component in the {bindings} property of a Description component, the {name} property MUST be unique.
Binding-0057 = A binding with the name ''{0}'' has already been defined for the description component. All bindings defined in the description component must have unique names.

# For each Binding Fault component in the {binding faults} property of a Binding component, the {interface fault} property MUST be unique.
BindingFault-0058 = The interface fault specified for this binding fault has already been specified on another binding fault. Each binding fault within a binding must specify a unique interface fault.

# For each Binding Fault Reference component in the {binding fault references} property of a Binding Operation component, the {interface fault reference} property MUST be unique.
BindingFaultReference-0061 = A binding fault reference has already been specified for the interface fault reference ''{0}''. Each binding fault reference within a binding operation component must specify a unique interface fault reference.

# There MUST be an Interface Fault Reference component in the {interface fault references} of the Interface Operation being bound with {message label} equal to the effective message label and with {interface fault} equal to an Interface Fault component with {name} equal to the actual value of the ref attribute information item.
BindingFaultReference-0062 = The binding fault reference must reference an defined interface fault reference.

# For each Binding Message Reference component in the {binding message references} property of a Binding Operation component, the {interface message reference} property MUST be unique.
BindingMessageReference-0060 = A binding message reference has already been specified for the interface message reference ''{0}''. Each binding message reference within a binding operation component must specify a unique interface message reference.

# For each Binding Operation component in the {binding operations} property of a Binding component, the {interface operation} property MUST be unique.
BindingOperation-0059 = A binding operation has already been specified for the interface operation ''{0}''. Each binding operation within a binding component must specify a unique interface operation.

Description-0024 = 
Description-0024.ref = 2.1.2
Description-0024.assertion = Each WSDL 2.0 or type system component MUST be uniquely identified by its qualified name.

# This xs:anyURI MUST be an absolute IRI as defined by [IETF RFC 3987].
Endpoint-0064 = The address ''{0}'' specified for this endpoint is not an absolute IRI. The address must be absolute.

# For each Endpoint component in the {endpoints} property of a Service component, the {name} property MUST be unique.
Endpoint-0065 = A endpoint with the name ''{0}'' has already been defined for the service component. All endpoints defined in a service component must have unique names.

# For each Endpoint component in the {endpoints} property of a Service component, the {binding} property MUST either be a Binding component with an unspecified {interface} property or a Binding component with an {interface} property equal to the {interface} property of the Service component.
Endpoint-0066 = The binding ''{0}'' specified for this endpoint specifies the interface ''{1}'' and not the interface ''{2}'' specified by the service. The binding specified for this endpoint must either not specify an interface or specify the same interface as the service.

FeatureRef-0046 = The ref ''{0}'' specified for this feature is not absolute. The ref must be absolute.
FeatureRef-0046.ref = 2.7.1
FeatureRef-0046.assertion = This xs:anyURI MUST be an absolute IRI as defined by [IETF RFC 3987].

FeatureRef-0047 = The ref ''{0}'' has already been specified for a feature in this component. The ref property for a feature must be unique within the enclosing component.
FeatureRef-0047.ref = 2.7.1
FeatureRef-0047.assertion = The {ref} property of a Feature component MUST be unique within the {features} property of an Interface, Interface Fault, Interface Operation, Interface Message Reference, Interface Fault Reference, Binding, Binding Fault, Binding Operation, Binding Message Reference, Binding Fault Reference, Service, or Endpoint component.

Interface-0027 = This interface extends itself via the extended interface ''{0}''. An interface cannot appear in the list of interfaces it extends.
Interface-0027.ref = 2.2.1
Interface-0027.assertion = To avoid circular definitions, an interface MUST NOT appear as an element of the set of interfaces it extends, either directly or indirectly.

Interface-0030 = An interface with the name ''{0}'' has already been defined for the description component. All interfaces defined in the description component must have unique names.
Interface-0030.ref = 2.2.1
Interface-0030.assertion = For each Interface component in the {interfaces} property of a Description component, the {name} property MUST be unique.

InterfaceFault-0028 = The namespace of the interface operation name must be the same as the namespace of the interface name.
InterfaceFault-0028.ref = 2.2.1
InterfaceFault-0028.assertion = The namespace name of the {name} property of each Interface Fault in this set MUST be the same as the namespace name of the {name} property of this Interface component.

InterfaceFault-0032 = An interface fault with the name ''{0}'' has already been defined for the interface component. All interface faults defined for an interface component must have a unique name.
InterfaceFault-0032.ref = 2.3.1
InterfaceFault-0032.assertion = For each Interface Fault component in the {interface faults} property of an Interface component, the {name} property must be unique.

InterfaceFault-0033 = 
InterfaceFault-0033.ref = 2.3.1
InterfaceFault-0033.assertion = In cases where, due to an interface extending one or more other interfaces, two or more Interface Fault components have the same value for their {name} property, then the component models of those Interface Fault components MUST be equivalent (see 2.17 Equivalence of Components).

InterfaceFaultReference-0043 = 
InterfaceFaultReference-0043.ref = 2.6.1
InterfaceFaultReference-0043.assertion = The value of this property MUST match the name of a placeholder message defined by the message exchange pattern.

InterfaceFaultReference-0044 = 
InterfaceFaultReference-0044.ref = 2.6.1
InterfaceFaultReference-0044.assertion = The direction MUST be consistent with the direction implied by the fault propagation ruleset used in the message exchange pattern of the operation.

InterfaceFaultReference-0045 = An interface fault reference with for the fault ''{0}'' and message label ''{1}'' has already been defined for this interface operation. Each fault reference in an interface operation must have a unique combination of fault and message label.
InterfaceFaultReference-0045.ref = 2.6.1
InterfaceFaultReference-0045.assertion = For each Interface Fault Reference component in the {interface fault references} property of an Interface Operation component, the combination of its {interface fault} and {message label} properties MUST be unique.

InterfaceMessageReference-0040 = 
InterfaceMessageReference-0040.ref = 2.5.1
InterfaceMessageReference-0040.assertion = The direction MUST be the same as the direction of the message identified by the {message label} property in the {message exchange pattern} of the Interface Operation component this is contained within.

InterfaceMessageReference-0041 = The message content model is #any or #none and the element declaration is not empty. The element declaration must be empty when the message content model is #any or #none.
InterfaceMessageReference-0041.ref = 2.5.1
InterfaceMessageReference-0041.assertion = When the {message content model} property has the value #any or #none the {element declaration} property MUST be empty.

InterfaceMessageReference-0042 = An interface message reference with the message label ''{0}'' has already been defined. An interface message reference must have a unique message label within the interface operation that contains it.
InterfaceMessageReference-0042.ref = 2.5.1
InterfaceMessageReference-0042.assertion = For each Interface Message Reference component in the {interface message references} property of an Interface Operation component, its {message label} property MUST be unique.

InterfaceOperation-0029 = The namespace of the interface operation name must be the same as the namespace of the interface name.
InterfaceOperation-0029.ref = 2.2.1
InterfaceOperation-0029.assertion = The namespace name of the {name} property of each Interface Operation in this set MUST be the same as the namespace name of the {name} property of this Interface component.

InterfaceOperation-0035 = An interface operation with the name ''{0}'' has already been defined for the interface component. All interface operations defined for an interface component must have a unique name.
InterfaceOperation-0035.ref = Section 2.4.1
InterfaceOperation-0035.assertion = For each Interface Operation component in the {interface operations} property of an Interface component, the {name} property MUST be unique.

InterfaceOperation-0036 = 
InterfaceOperation-0036 = 2.4.1
InterfaceOperation-0036.assertion = In cases where, due to an interface extending one or more other interfaces, two or more Interface Operation components have the same value for their {name} property, then the component models of those Interface Operation components MUST be equivalent (see 2.17 Equivalence of Components).

InterfaceOperation-0038 = 
InterfaceOperation-0038.ref = 2.4.1.2
InterfaceOperation-0038.assertion = An Interface Operation component MUST satisfy the specification defined by each operation style identified by its {style} property.

MEP-0037 = The message exchange pattern ''{0}'' is not absolute. A message exchange pattern must be identified by an absolute IRI.
MEP-0037.ref = 2.4.1.1
MEP-0037.assertion = A message exchange pattern is uniquely identified by an absolute IRI which is used as the value of the {message exchange pattern} property the Interface Operation component, and it specifies the fault propagation ruleset that its faults obey.

MessageLabel-0039 = 
MessageLabel-0039.ref = 2.5.1
MessageLabel-0039.assertion = The value of this property MUST match the name of a placeholder message defined by the message exchange pattern.

Property-0049 = The constraint references type ''{0}'' that is not available. A constraint may only reference types that are available in the description component.
Property-0049.ref = 2.8.1
Property-0049.assertion = A reference to a Type Definition component in the {type definitions} property of the Description component constraining the value of the Property, or the token #value if the {value} property is not empty.

Property-0049b = The property value is not empty and the constraint is not #value. The constraint must be #value when the value is not empty.
Property-0049b.ref = 2.8.1
Property-0049b.assertion = A reference to a Type Definition component in the {type definitions} property of the Description component constraining the value of the Property, or the token #value if the {value} property is not empty.

Property-0050 = The ref ''{0}'' has already been specified for a property in this component. The ref property for a property must be unique within the enclosing component.
Property-0050.ref = 2.8.1
Property-0050.assertion = The {ref} property of a Property component MUST be unique within the {properties} property of an Interface, Interface Fault, Interface Operation, Interface Message Reference, Interface Fault Reference, Binding, Binding Fault, Binding Operation, Binding Message Reference, Binding Fault Reference, Service, or Endpoint component.

Property-0051 = 
Property-0051.ref = 2.8.1.1
Property-0051.assertion = All specified values MUST be equal and belong to each specified value set.

PropertyRef-0048 = The ref ''{0}'' specified for this property is not absolute. The ref must be absolute.
PropertyRef-0048.ref = 2.8.1
PropertyRef-0048.assertion = This xs:anyURI MUST an absolute IRI as defined by [IETF RFC 3987].

QName-0002 = 
QName-0002.assertion = Furthermore, all QName references, whether to the same of to difference namespace MUST resolve to components (see 2.1.9 QName resolution).

# For each Service  component in the {services} property of a Description component, the {name} property MUST be unique.
Service-0063 = A service with the name ''{0}'' has already been defined for the description component. All services defined in the description component must have unique names.

Types-0026 = 
Types-0026.ref = 2.1.2.1
Types-0026.assertion = It is an error if there are multiple type definitions for each QName.

# ------------SECTION 3: WSDL-related warnings -------------------
# These warnings were pulled from the WSDL 2.0 spec and are possible warnings
# for the validator to report.

Description-S0001 = 
Description-S0001.ref = 2.1.2
Description-S0001.assertion = The value of the targetNamespace attribute information item SHOULD be a dereferenceable IRI (see [IETF RFC 3987])

InterfaceFault-S0002 = 
InterfaceFault-S0002.ref = 2.3.1
InterfaceFault-S0002.assertion = For the above reason, it is considered good practice to ensure, where necessary, that the local name of the {name} property of Interface Fault components within a namespace are unique, thus allowing such derivation to occur without inadvertent error.

InterfaceOperation-S0003 = 
InterfaceOperation-S0003.ref = 2.4.1
InterfaceOperation-S0003.assertion = For the above reason, it is considered good practice to ensure, where necessary, that the {name} property of Interface Operation components within a namespace are unique, thus allowing such derivation to occur without inadvertent error.

FeatureRef-S0004 = 
FeatureRef-S0004.ref = 2.7.1
FeatureRef-S0004.assertion = This IRI SHOULD be dereferenceable to a document that directly or indirectly defines the meaning and use of the Feature that it identifies.

PropertyRef-S0005 = 
PropertyRef-S0005.ref = 2.8.1
PropertyRef-S0005.assertion = This IRI SHOULD be dereferenceable to a document that directly or indirectly defines the meaning and use of the Property that it identifies.

------------------- End of Messages ----------------------------